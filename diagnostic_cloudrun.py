#!/usr/bin/env python3
"""
Diagnostic sp√©cifique pour le probl√®me Cloud Run identifi√©
"""

import requests
import json
import time
import os
import base64

def test_small_image():
    """Test avec une tr√®s petite image pour isoler le probl√®me"""
    print("üîç TEST AVEC UNE PETITE IMAGE")
    print("=" * 60)
    
    # Cr√©er une petite image de test (1x1 pixel PNG)
    # PNG header + 1x1 pixel blanc transparent
    tiny_png = base64.b64decode(
        "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAGCfVgChgAAAABJRU5ErkJggg=="
    )
    
    with open("tiny_test.png", "wb") as f:
        f.write(tiny_png)
    
    print(f"üìÅ Image de test cr√©√©e: {len(tiny_png)} bytes")
    
    # Test avec l'API distante
    print("\nüöÄ Test Cloud Run avec image minuscule")
    try:
        with open("tiny_test.png", "rb") as f:
            files = {'image': ('tiny.png', f, 'image/png')}
            
            start_time = time.time()
            response = requests.post(
                "https://rembg-api-262374855257.europe-west1.run.app/remove-background",
                files=files,
                timeout=120
            )
            end_time = time.time()
            
            print(f"   Status: {response.status_code}")
            print(f"   Dur√©e: {end_time - start_time:.3f}s")
            print(f"   Content-Type: {response.headers.get('content-type', 'Unknown')}")
            
            if response.status_code == 200:
                print(f"   ‚úÖ Succ√®s avec petite image: {len(response.content)} bytes")
                return True
            else:
                print(f"   ‚ùå √âchec: {response.text[:200]}")
                return False
                
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False

def test_progressive_sizes():
    """Test avec des tailles d'image progressives"""
    print("\nüìä TEST AVEC TAILLES PROGRESSIVES")
    print("=" * 60)
    
    # Utiliser l'image originale et cr√©er des versions redimensionn√©es
    original_path = "/Users/guillaumeesnault/Downloads/uniqueName_1746368260953_2660.png"
    
    if not os.path.exists(original_path):
        print("‚ùå Image originale non trouv√©e")
        return
    
    # Lire l'image originale
    with open(original_path, "rb") as f:
        original_data = f.read()
    
    print(f"üìè Taille originale: {len(original_data):,} bytes")
    
    # Test avec des portions de l'image pour simuler diff√©rentes tailles
    sizes_to_test = [1024, 2048, 4096, 8192, 16384, 32768]
    
    for max_size in sizes_to_test:
        if len(original_data) <= max_size:
            continue
            
        print(f"\nüß™ Test avec {max_size} premiers bytes")
        try:
            # Prendre seulement les premiers bytes (pas une vraie image, mais test de taille)
            test_data = original_data[:max_size]
            
            # Sauvegarder temporairement
            test_file = f"test_{max_size}.dat"
            with open(test_file, "wb") as f:
                f.write(test_data)
            
            # Test rapide de l'API
            with open(test_file, "rb") as f:
                files = {'image': ('test.png', f, 'image/png')}
                
                start_time = time.time()
                try:
                    response = requests.post(
                        "https://rembg-api-262374855257.europe-west1.run.app/remove-background",
                        files=files,
                        timeout=60
                    )
                    end_time = time.time()
                    
                    print(f"     Status: {response.status_code}, Dur√©e: {end_time - start_time:.3f}s")
                    
                    if response.status_code != 200:
                        print(f"     Erreur: {response.text[:100]}")
                        
                except requests.exceptions.Timeout:
                    print(f"     ‚è∞ Timeout apr√®s 60s")
                except Exception as e:
                    print(f"     ‚ùå Erreur: {e}")
            
            # Nettoyer
            os.remove(test_file)
            
        except Exception as e:
            print(f"     ‚ùå Erreur test: {e}")

def test_request_format():
    """Test de diff√©rents formats de requ√™te pour identifier le probl√®me exact"""
    print("\nüî¨ TEST DES FORMATS DE REQU√äTE")
    print("=" * 60)
    
    tiny_png = base64.b64decode(
        "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAGCfVgChgAAAABJRU5ErkJggg=="
    )
    
    base_url = "https://rembg-api-262374855257.europe-west1.run.app"
    
    # Test 1: Multipart simple
    print("\n1Ô∏è‚É£ Test multipart basique")
    try:
        files = {'image': ('test.png', tiny_png, 'image/png')}
        response = requests.post(f"{base_url}/remove-background", files=files, timeout=30)
        print(f"   Status: {response.status_code}")
        if response.status_code != 200:
            print(f"   Error: {response.text[:200]}")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    # Test 2: Avec param√®tres
    print("\n2Ô∏è‚É£ Test avec param√®tres")
    try:
        files = {'image': ('test.png', tiny_png, 'image/png')}
        params = {'model': 'u2net', 'white_bg': 'false'}
        response = requests.post(f"{base_url}/remove-background", files=files, params=params, timeout=30)
        print(f"   Status: {response.status_code}")
        if response.status_code != 200:
            print(f"   Error: {response.text[:200]}")
    except Exception as e:
        print(f"   Erreur: {e}")
    
    # Test 3: Headers sp√©cifiques
    print("\n3Ô∏è‚É£ Test avec headers Cloud Run")
    try:
        files = {'image': ('test.png', tiny_png, 'image/png')}
        headers = {
            'User-Agent': 'CloudRunDiagnostic/1.0',
            'Accept': '*/*'
        }
        response = requests.post(f"{base_url}/remove-background", files=files, headers=headers, timeout=30)
        print(f"   Status: {response.status_code}")
        if response.status_code != 200:
            print(f"   Error: {response.text[:200]}")
    except Exception as e:
        print(f"   Erreur: {e}")

def analyze_cloud_run_issue():
    """Analyse sp√©cifique du probl√®me Cloud Run"""
    print("\nüèóÔ∏è ANALYSE DU PROBL√àME CLOUD RUN")
    print("=" * 60)
    
    print("üìã Analyse du log d'erreur:")
    print("   ‚Ä¢ Latency: 0.154526003s (crash tr√®s rapide)")
    print("   ‚Ä¢ Error: malformed response or connection error")
    print("   ‚Ä¢ Status: 503 Service Unavailable")
    print("   ‚Ä¢ Request size: 62,489 bytes (taille raisonnable)")
    
    print("\nüéØ Causes probables:")
    causes = [
        "1. Instance Cloud Run manque de m√©moire (OOM kill)",
        "2. Crash de l'application Python au d√©marrage du traitement",
        "3. Timeout de d√©marrage de l'instance (cold start)",
        "4. Probl√®me avec les d√©pendances rembg/onnxruntime",
        "5. Limite de CPU d√©pass√©e rapidement"
    ]
    
    for cause in causes:
        print(f"   {cause}")
    
    print("\nüîß Actions recommand√©es:")
    actions = [
        "1. Augmenter drastiquement la m√©moire (4GB minimum)",
        "2. R√©duire la concurrence √† 1",
        "3. Augmenter le CPU √† 2 vCPU",
        "4. Supprimer le pr√©-chargement du mod√®le",
        "5. Ajouter plus de logging dans l'application",
        "6. Impl√©menter un warmup endpoint"
    ]
    
    for action in actions:
        print(f"   {action}")

def generate_fixed_dockerfile():
    """G√©n√®re un Dockerfile corrig√© pour le probl√®me identifi√©"""
    print("\nüõ†Ô∏è G√âN√âRATION DOCKERFILE CORRIG√â")
    print("=" * 60)
    
    dockerfile_content = '''# Dockerfile optimis√© pour Cloud Run - Version corrective
FROM python:3.11-slim

# Variables d'environnement optimis√©es
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PORT=8080
ENV WORKERS=1

# Installation des d√©pendances syst√®me
RUN apt-get update && apt-get install -y \\
    libglib2.0-0 libsm6 libxext6 libxrender-dev \\
    libgomp1 libgl1-mesa-glx \\
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Installation des d√©pendances Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# IMPORTANT: NE PAS pr√©-charger le mod√®le pour √©viter le crash au d√©marrage
# RUN python -c "from rembg import new_session; new_session('u2net')"

# Copie du code
COPY . .

# Endpoint de warmup pour pr√©-charger le mod√®le √† la demande
EXPOSE 8080

# Commande optimis√©e pour Cloud Run
CMD exec python main.py'''
    
    with open("Dockerfile.fixed", "w") as f:
        f.write(dockerfile_content)
    
    print("‚úÖ Dockerfile.fixed g√©n√©r√©")

def main():
    """Fonction principale"""
    print("üö® DIAGNOSTIC CLOUD RUN - PROBL√àME IDENTIFI√â")
    print("=" * 70)
    
    analyze_cloud_run_issue()
    test_small_image()
    test_request_format()
    generate_fixed_dockerfile()
    
    print("\n" + "=" * 70)
    print("üéØ CONCLUSION: L'instance Cloud Run crash au d√©marrage du traitement")
    print("üí° SOLUTION: Augmenter les ressources ET supprimer le pr√©-chargement")
    print("=" * 70)

if __name__ == "__main__":
    main()
