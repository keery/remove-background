from fastapi import FastAPI, File, UploadFile, HTTPException, Query
from fastapi.responses import Response
from fastapi.middleware.cors import CORSMiddleware
import io
import os
from pathlib import Path
from typing import Optional
import base64
import logging

try:
    from rembg import remove as bg, new_session
    from PIL import Image
except ImportError as e:
    print(f"‚ùå Erreur d'import: {e}")
    raise

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Background Removal API",
    description="API pour supprimer le background des images avec rembg",
    version="1.0.0"
)

import time

# Middleware de logging pour d√©bugger
@app.middleware("http")
async def log_requests(request, call_next):
    start_time = time.time()
    
    # Log de la requ√™te entrante
    client_ip = request.client.host if request.client else 'unknown'
    logger.info(f"üåê {request.method} {request.url.path} - Client: {client_ip}")
    
    # Log de la taille du body pour les POST
    if request.method == "POST":
        body = await request.body()
        logger.info(f"üì¶ Body size: {len(body)} bytes")
        # Reconstruire la requ√™te pour que FastAPI puisse la lire
        async def receive():
            return {"type": "http.request", "body": body}
        request._receive = receive
    
    try:
        # Traiter la requ√™te
        response = await call_next(request)
        
        # Log de la r√©ponse
        process_time = time.time() - start_time
        logger.info(f"‚ö° R√©ponse {response.status_code} en {process_time:.2f}s")
        
        return response
    except Exception as e:
        process_time = time.time() - start_time
        logger.error(f"üí• Erreur apr√®s {process_time:.2f}s: {str(e)}")
        raise

# Configuration CORS pour permettre les appels depuis votre NestJS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifiez vos domaines
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class BackgroundRemovalService:
    """Service pour g√©rer la suppression de background"""
    
    MODELS = {
        'u2net': 'G√©n√©ral - Bon √©quilibre qualit√©/vitesse',
        'u2net_human_seg': 'Optimis√© pour les personnes',
        'u2net_cloth_seg': 'Optimis√© pour les v√™tements',
        'isnet-general-use': 'G√©n√©ral - Haute qualit√©',
        'birefnet-general': 'G√©n√©ral - Tr√®s haute qualit√© (plus lent)',
        'silueta': 'Personnes - Rapide'
    }
    
    def __init__(self):
        self.sessions = {}
        # Pr√©-charger le mod√®le par d√©faut
        self.get_session('u2net')
    
    def get_session(self, model_name: str = 'u2net'):
        """R√©cup√®re ou cr√©e une session pour un mod√®le"""
        if model_name not in self.sessions:
            try:
                logger.info(f"Initialisation du mod√®le: {model_name}")
                self.sessions[model_name] = new_session(model_name)
            except Exception as e:
                logger.error(f"Erreur lors de l'initialisation du mod√®le {model_name}: {e}")
                # Fallback vers u2net
                if model_name != 'u2net':
                    self.sessions[model_name] = self.get_session('u2net')
                else:
                    raise
        return self.sessions[model_name]
    
    def remove_background(self, image_data: bytes, model_name: str = 'u2net', 
                         white_background: bool = False) -> bytes:
        """
        Supprime le background d'une image
        
        Args:
            image_data: Donn√©es de l'image en bytes
            model_name: Mod√®le √† utiliser
            white_background: Ajouter un fond blanc au lieu de transparent
            
        Returns:
            bytes: Image process√©e
        """
        try:
            session = self.get_session(model_name)
            
            # Supprimer le background
            output_data = bg(image_data, session=session)
            
            if white_background:
                # Ajouter un fond blanc
                image = Image.open(io.BytesIO(output_data)).convert("RGBA")
                white_bg = Image.new("RGB", image.size, (255, 255, 255))
                white_bg.paste(image, mask=image.split()[-1])
                
                # Convertir en bytes
                output_buffer = io.BytesIO()
                white_bg.save(output_buffer, format='JPEG', quality=95)
                return output_buffer.getvalue()
            else:
                return output_data
                
        except Exception as e:
            logger.error(f"Erreur lors du traitement: {e}")
            raise HTTPException(status_code=500, detail=f"Erreur de traitement: {str(e)}")

# Instance globale du service
bg_service = BackgroundRemovalService()

@app.get("/")
async def root():
    """Point de sant√© de l'API"""
    return {
        "message": "Background Removal API",
        "status": "running",
        "models": list(BackgroundRemovalService.MODELS.keys())
    }

@app.get("/health")
async def health():
    """Health check pour Google Cloud Run"""
    return {"status": "healthy"}

@app.get("/models")
async def list_models():
    """Liste les mod√®les disponibles"""
    return {
        "models": BackgroundRemovalService.MODELS
    }

@app.post("/remove-background")
async def remove_background_endpoint(
    image: UploadFile = File(..., description="Image √† traiter"),
    model: str = Query('u2net', description="Mod√®le √† utiliser"),
    white_bg: bool = Query(False, description="Ajouter un fond blanc"),
    format: str = Query('png', description="Format de sortie (png/jpeg)")
):
    """
    Supprime le background d'une image upload√©e
    """
    # V√©rifier le type de fichier
    if not image.content_type.startswith('image/'):
        raise HTTPException(status_code=400, detail="Le fichier doit √™tre une image")
    
    # V√©rifier le mod√®le
    if model not in BackgroundRemovalService.MODELS:
        raise HTTPException(
            status_code=400, 
            detail=f"Mod√®le '{model}' non support√©. Mod√®les disponibles: {list(BackgroundRemovalService.MODELS.keys())}"
        )
    
    try:
        # Lire l'image
        image_data = await image.read()
        logger.info(f"Traitement d'une image de {len(image_data)} bytes avec le mod√®le {model}")
        
        # Traiter l'image
        result_data = bg_service.remove_background(
            image_data, 
            model_name=model,
            white_background=white_bg
        )
        
        # D√©terminer le type de contenu
        if white_bg or format.lower() == 'jpeg':
            media_type = "image/jpeg"
            filename = "result.jpg"
        else:
            media_type = "image/png"
            filename = "result.png"
        
        return Response(
            content=result_data,
            media_type=media_type,
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/remove-background-base64")
async def remove_background_base64(
    request: dict,
):
    """
    Supprime le background d'une image encod√©e en base64
    
    Body: {
        "image": "base64_string",
        "model": "u2net", 
        "white_bg": false
    }
    """
    logger.info(f"üîÑ Nouvelle requ√™te re√ßue: {len(str(request))} chars")
    
    try:
        # Extraire les param√®tres
        image_b64 = request.get('image')
        model = request.get('model', 'u2net')
        white_bg = request.get('white_bg', False)
        
        logger.info(f"üìã Param√®tres: model={model}, white_bg={white_bg}, image_size={len(image_b64) if image_b64 else 0}")
        
        if not image_b64:
            logger.error("‚ùå Image base64 manquante")
            raise HTTPException(status_code=400, detail="Image base64 manquante")
        
        # D√©coder l'image
        try:
            logger.info("üîç D√©codage base64...")
            image_data = base64.b64decode(image_b64)
            logger.info(f"‚úÖ Image d√©cod√©e: {len(image_data)} bytes")
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©codage base64: {e}")
            raise HTTPException(status_code=400, detail="Format base64 invalide")
        
        # Traiter l'image
        logger.info("ü§ñ D√©but du traitement...")
        result_data = bg_service.remove_background(
            image_data,
            model_name=model,
            white_background=white_bg
        )
        logger.info(f"‚úÖ Traitement termin√©: {len(result_data)} bytes")
        
        # Encoder le r√©sultat en base64
        logger.info("üì¶ Encodage du r√©sultat...")
        result_b64 = base64.b64encode(result_data).decode('utf-8')
        logger.info(f"‚úÖ R√©sultat encod√©: {len(result_b64)} chars")
        
        return {
            "success": True,
            "image": result_b64,
            "model_used": model,
            "white_background": white_bg
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du traitement base64: {e}")
        import traceback
        logger.error(f"Stack trace: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)